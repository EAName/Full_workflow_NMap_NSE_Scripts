#!/usr/bin/env python3
"""
Vulnerability Scanner Module
Handles NSE-based vulnerability scanning and assessment
"""

import json
import logging
import subprocess
import time
from pathlib import Path
from typing import Dict, List, Optional


class VulnerabilityScanner:
    """Handles vulnerability scanning using NSE scripts"""
    
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.nmap_path = self._find_nmap()
        self.nse_scripts = self._load_nse_scripts()
    
    def _find_nmap(self) -> str:
        """Find nmap executable path"""
        try:
            result = subprocess.run(['which', 'nmap'], capture_output=True, text=True)
            if result.returncode == 0:
                return result.stdout.strip()
        except:
            pass
        
        # Common nmap locations
        common_paths = ['/usr/bin/nmap', '/usr/local/bin/nmap', '/opt/nmap/bin/nmap']
        for path in common_paths:
            if Path(path).exists():
                return path
        
        raise FileNotFoundError("Nmap not found. Please install nmap first.")
    
    def _load_nse_scripts(self) -> Dict:
        """Load NSE script configurations"""
        try:
            with open("config/nse_scripts.json", 'r') as f:
                return json.load(f)
        except FileNotFoundError:
            return self._get_default_nse_scripts()
    
    def _get_default_nse_scripts(self) -> Dict:
        """Return default NSE script configurations"""
        return {
            "discovery": [
                "broadcast-dhcp-discover",
                "broadcast-dns-service-discovery",
                "broadcast-netbios-master-browser",
                "dns-brute",
                "dns-service-discovery",
                "ipidseq",
                "path-mtu",
                "traceroute-geolocation"
            ],
            "vulnerability": [
                "vuln",
                "auth",
                "default",
                "http-vuln-*",
                "ssl-*",
                "smb-vuln-*",
                "ftp-vuln-*",
                "ssh-vuln-*"
            ],
            "auth": [
                "auth",
                "auth-brute",
                "auth-fuzzer",
                "auth-spoof"
            ],
            "default": [
                "default",
                "discovery",
                "safe"
            ],
            "custom": [
                "custom_scripts/enhanced-discovery",
                "custom_scripts/service-enum",
                "custom_scripts/vulnerability-detect"
            ]
        }
    
    def run_vulnerability_scan(self, config: Dict) -> Dict:
        """Run comprehensive vulnerability scan"""
        self.logger.info(f"Starting vulnerability scan for {len(config['hosts'])} hosts")
        
        # Build nmap command
        cmd = self._build_vulnerability_command(config)
        
        # Execute scan
        start_time = time.time()
        result = self._execute_vulnerability_scan(cmd, config)
        end_time = time.time()
        
        return {
            "command": cmd,
            "execution_time": end_time - start_time,
            "success": result["success"],
            "output_file": config["output"],
            "error": result.get("error"),
            "vulnerabilities_found": result.get("vulnerabilities_found", 0)
        }
    
    def _build_vulnerability_command(self, config: Dict) -> List[str]:
        """Build nmap vulnerability scan command"""
        cmd = [self.nmap_path]
        
        # Basic options
        cmd.extend([
            "-sS",  # SYN scan
            "-sV",  # Version detection
            "-O",   # OS detection
            "-n",   # No DNS resolution
            "-oX", config["output"]  # XML output
        ])
        
        # Port selection
        profile = config["profile"]
        if profile["ports"] == "top-100":
            cmd.extend(["--top-ports", "100"])
        elif profile["ports"] == "top-1000":
            cmd.extend(["--top-ports", "1000"])
        elif profile["ports"] == "all":
            cmd.extend(["-p-"])
        else:
            cmd.extend(["-p", profile["ports"]])
        
        # Timing template
        timing_map = {1: "T0", 2: "T1", 3: "T2", 4: "T3", 5: "T4"}
        cmd.extend([f"-{timing_map.get(profile['timing'], 'T3')}"])
        
        # Retries
        cmd.extend([f"--max-retries", str(profile["max_retries"])])
        
        # NSE Scripts
        scripts = self._get_scripts_for_profile(profile)
        if scripts:
            cmd.extend([f"--script={','.join(scripts)}"])
        
        # Rate limiting
        if config.get("rate_limit"):
            cmd.extend([f"--min-rate", str(config["rate_limit"])])
        
        # Additional options for vulnerability scanning
        cmd.extend([
            "--script-args", "vulners.showall",
            "--script-args", "http.useragent=Mozilla/5.0 (compatible; NmapVulnScanner/1.0)"
        ])
        
        # Host list
        hosts_file = self._create_hosts_file(config["hosts"])
        cmd.extend(["-iL", str(hosts_file)])
        
        return cmd
    
    def _get_scripts_for_profile(self, profile: Dict) -> List[str]:
        """Get NSE scripts for the given profile"""
        scripts = []
        
        if "scripts" in profile:
            for script_category in profile["scripts"]:
                if script_category in self.nse_scripts:
                    scripts.extend(self.nse_scripts[script_category])
                else:
                    # Direct script name
                    scripts.append(script_category)
        
        return scripts
    
    def _create_hosts_file(self, hosts: List[str]) -> Path:
        """Create temporary hosts file"""
        hosts_file = Path("temp_vuln_hosts.txt")
        with open(hosts_file, 'w') as f:
            for host in hosts:
                f.write(f"{host}\n")
        return hosts_file
    
    def _execute_vulnerability_scan(self, cmd: List[str], config: Dict) -> Dict:
        """Execute vulnerability scan with proper error handling"""
        try:
            self.logger.info(f"Executing vulnerability scan: {' '.join(cmd)}")
            
            # Run nmap process
            process = subprocess.Popen(
                cmd,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            # Monitor progress
            stdout, stderr = process.communicate()
            
            if process.returncode == 0:
                self.logger.info("Vulnerability scan completed successfully")
                
                # Parse results for vulnerability count
                vuln_count = self._count_vulnerabilities_from_xml(config["output"])
                
                return {
                    "success": True,
                    "vulnerabilities_found": vuln_count
                }
            else:
                error_msg = stderr.strip() if stderr else "Unknown error"
                self.logger.error(f"Vulnerability scan failed: {error_msg}")
                return {"success": False, "error": error_msg}
                
        except Exception as e:
            self.logger.error(f"Error executing vulnerability scan: {str(e)}")
            return {"success": False, "error": str(e)}
        finally:
            # Clean up temporary files
            temp_file = Path("temp_vuln_hosts.txt")
            if temp_file.exists():
                temp_file.unlink()
    
    def _count_vulnerabilities_from_xml(self, xml_file: str) -> int:
        """Count vulnerabilities from nmap XML output"""
        try:
            with open(xml_file, 'r') as f:
                content = f.read()
            
            # Count script outputs that indicate vulnerabilities
            vuln_indicators = [
                'VULNERABLE',
                'CVE-',
                'vulnerability',
                'exploit',
                'weak',
                'default',
                'anonymous'
            ]
            
            count = 0
            lines = content.split('\n')
            for line in lines:
                line_lower = line.lower()
                for indicator in vuln_indicators:
                    if indicator.lower() in line_lower:
                        count += 1
                        break
            
            return count
            
        except Exception as e:
            self.logger.error(f"Error counting vulnerabilities: {str(e)}")
            return 0
    
    def run_targeted_vulnerability_scan(self, target: str, script_category: str) -> Dict:
        """Run targeted vulnerability scan with specific script category"""
        self.logger.info(f"Running targeted {script_category} scan on {target}")
        
        if script_category not in self.nse_scripts:
            return {"success": False, "error": f"Unknown script category: {script_category}"}
        
        scripts = self.nse_scripts[script_category]
        
        cmd = [
            self.nmap_path,
            "-sS",
            "-sV",
            "-n",
            "-oX", "-",
            f"--script={','.join(scripts)}",
            target
        ]
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True)
            
            if result.returncode == 0:
                # Parse results
                vulnerabilities = self._parse_vulnerability_xml(result.stdout)
                return {
                    "success": True,
                    "target": target,
                    "script_category": script_category,
                    "vulnerabilities": vulnerabilities,
                    "count": len(vulnerabilities)
                }
            else:
                return {
                    "success": False,
                    "error": result.stderr
                }
                
        except Exception as e:
            return {
                "success": False,
                "error": str(e)
            }
    
    def _parse_vulnerability_xml(self, xml_output: str) -> List[Dict]:
        """Parse vulnerability information from XML output"""
        vulnerabilities = []
        
        lines = xml_output.split('\n')
        current_host = None
        current_port = None
        
        for line in lines:
            # Extract host information
            if '<address addr=' in line and 'addrtype="ipv4"' in line:
                start = line.find('addr="') + 6
                end = line.find('"', start)
                if start > 5 and end > start:
                    current_host = line[start:end]
            
            # Extract port information
            elif '<port ' in line and 'portid=' in line:
                start = line.find('portid="') + 8
                end = line.find('"', start)
                if start > 7 and end > start:
                    current_port = line[start:end]
            
            # Extract script output (vulnerabilities)
            elif '<script ' in line and 'output=' in line:
                start = line.find('output="') + 8
                end = line.find('"', start)
                if start > 7 and end > start:
                    output = line[start:end]
                    
                    # Check if this indicates a vulnerability
                    if self._is_vulnerability_indicator(output):
                        vuln = {
                            "host": current_host,
                            "port": current_port,
                            "output": output,
                            "severity": self._determine_severity(output)
                        }
                        vulnerabilities.append(vuln)
        
        return vulnerabilities
    
    def _is_vulnerability_indicator(self, output: str) -> bool:
        """Check if script output indicates a vulnerability"""
        vuln_keywords = [
            'vulnerable', 'cve-', 'exploit', 'weak', 'default',
            'anonymous', 'backdoor', 'malware', 'trojan'
        ]
        
        output_lower = output.lower()
        return any(keyword in output_lower for keyword in vuln_keywords)
    
    def _determine_severity(self, output: str) -> str:
        """Determine vulnerability severity from output"""
        output_lower = output.lower()
        
        high_indicators = ['critical', 'high', 'cve-', 'exploit', 'backdoor']
        medium_indicators = ['medium', 'weak', 'default']
        low_indicators = ['low', 'info', 'anonymous']
        
        if any(indicator in output_lower for indicator in high_indicators):
            return "high"
        elif any(indicator in output_lower for indicator in medium_indicators):
            return "medium"
        elif any(indicator in output_lower for indicator in low_indicators):
            return "low"
        else:
            return "info"
    
    def get_vulnerability_summary(self, xml_file: str) -> Dict:
        """Get vulnerability summary from scan results"""
        try:
            with open(xml_file, 'r') as f:
                content = f.read()
            
            summary = {
                "total_vulnerabilities": 0,
                "high_severity": 0,
                "medium_severity": 0,
                "low_severity": 0,
                "affected_hosts": set(),
                "affected_services": set(),
                "cve_references": set()
            }
            
            lines = content.split('\n')
            for line in lines:
                if '<script ' in line and 'output=' in line:
                    start = line.find('output="') + 8
                    end = line.find('"', start)
                    if start > 7 and end > start:
                        output = line[start:end]
                        
                        if self._is_vulnerability_indicator(output):
                            summary["total_vulnerabilities"] += 1
                            
                            severity = self._determine_severity(output)
                            if severity == "high":
                                summary["high_severity"] += 1
                            elif severity == "medium":
                                summary["medium_severity"] += 1
                            elif severity == "low":
                                summary["low_severity"] += 1
            
            # Convert sets to lists for JSON serialization
            summary["affected_hosts"] = list(summary["affected_hosts"])
            summary["affected_services"] = list(summary["affected_services"])
            summary["cve_references"] = list(summary["cve_references"])
            
            return summary
            
        except Exception as e:
            self.logger.error(f"Error generating vulnerability summary: {str(e)}")
            return {}


def main():
    """Test vulnerability scanner"""
    import argparse
    
    parser = argparse.ArgumentParser(description="Vulnerability Scanner")
    parser.add_argument("--hosts", required=True, help="Comma-separated list of hosts")
    parser.add_argument("--output", default="vulnerability_results.xml", help="Output file")
    parser.add_argument("--profile", default="comprehensive", help="Scan profile")
    
    args = parser.parse_args()
    
    scanner = VulnerabilityScanner()
    
    hosts = [host.strip() for host in args.hosts.split(',')]
    
    config = {
        "hosts": hosts,
        "output": args.output,
        "profile": {
            "ports": "top-1000",
            "scripts": ["vulnerability", "auth"],
            "timing": 2,
            "max_retries": 2,
            "os_detection": True
        }
    }
    
    result = scanner.run_vulnerability_scan(config)
    print(json.dumps(result, indent=2))


if __name__ == "__main__":
    main() 